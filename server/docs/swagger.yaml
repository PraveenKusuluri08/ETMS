definitions:
  endpoints.AcceptInvitationResponse:
    properties:
      message:
        type: string
    type: object
  endpoints.BadRequestResponse:
    properties:
      error:
        type: string
      message:
        $ref: '#/definitions/endpoints.ErrorMessage'
      status:
        type: string
    type: object
  endpoints.CreatedResponse:
    properties:
      message:
        type: string
      status:
        type: string
    type: object
  endpoints.ErrorMessage:
    properties:
      name:
        type: string
    type: object
  endpoints.GetUsersResponse:
    properties:
      users:
        items:
          additionalProperties:
            type: string
          type: object
        type: array
    type: object
  endpoints.InternalServerResponse:
    properties:
      error:
        type: string
      message:
        $ref: '#/definitions/endpoints.ErrorMessage'
      status:
        type: string
    type: object
  endpoints.InviteGroupMembersResponse:
    properties:
      message:
        type: string
      non_existing_users:
        items:
          type: string
        type: array
      total_no_existing_users:
        type: integer
    type: object
  endpoints.SuccessResponse:
    properties:
      message:
        type: string
    type: object
  expenses.Expenses:
    properties:
      amount:
        type: number
      category:
        type: string
      created_at:
        type: string
      created_by:
        type: string
      description:
        type: string
      group_expense_split:
        $ref: '#/definitions/expenses.Split'
      is_group_expense:
        type: boolean
      is_personal_expense:
        type: boolean
      owes_amount:
        type: string
      paid_by:
        type: string
      split_need_to_clear_by:
        type: string
      title:
        type: string
    required:
    - amount
    - category
    - created_by
    - description
    - title
    type: object
  expenses.Peer:
    properties:
      amount:
        type: string
      peer_id:
        type: string
    type: object
  expenses.Split:
    properties:
      group_id:
        type: string
      involved_peers:
        items:
          $ref: '#/definitions/expenses.Peer'
        type: array
      owes_amount:
        type: string
      owes_to:
        type: string
      split_type:
        type: string
    type: object
  groups.AcceptInvitationStruct:
    properties:
      email:
        type: string
      groupname:
        type: string
    type: object
  groups.Group:
    properties:
      createdBy:
        type: string
      groupName:
        type: string
      id:
        type: string
      type:
        type: string
      users:
        items:
          additionalProperties:
            type: string
          type: object
        type: array
    required:
    - createdBy
    - groupName
    - type
    - users
    type: object
  groups.Invitation:
    properties:
      groupname:
        type: string
      users:
        items:
          type: string
        type: array
    type: object
  groups.UpdateGroupStruct:
    properties:
      groupname:
        type: string
      new_group_name:
        type: string
    type: object
  users.User:
    properties:
      email:
        type: string
      groups:
        items:
          additionalProperties:
            type: string
          type: object
        type: array
      password:
        type: string
      username:
        type: string
    required:
    - email
    - password
    type: object
  users.UserSigninResponse:
    properties:
      token:
        type: string
    type: object
  users.UserSigninStruct:
    properties:
      email:
        type: string
      password:
        type: string
    required:
    - password
    type: object
host: localhost:8080
info:
  contact:
    name: Praveen
  description: This is a simple ETMS API's for managing expenses by own or by others
    with groups
  termsOfService: https://swagger.io/terms
  title: ETMS API
  version: "1.0"
paths:
  /api/v1/expenses/create:
    post:
      consumes:
      - application/json
      description: Create a new expense based on the user's amount and the preferences
      parameters:
      - description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Expenses
        in: body
        name: expense
        required: true
        schema:
          $ref: '#/definitions/expenses.Expenses'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/endpoints.CreatedResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/endpoints.BadRequestResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/endpoints.InternalServerResponse'
      security:
      - ApiKeyAuth: []
      summary: Create new expense
      tags:
      - Expenses
  /api/v1/groups/accept_invitation:
    post:
      consumes:
      - application/json
      description: Accept invitation to group member with the provided group name
        and email
      parameters:
      - description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Accept Inviation
        in: body
        name: acceptInvitation
        required: true
        schema:
          $ref: '#/definitions/groups.AcceptInvitationStruct'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/endpoints.AcceptInvitationResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/endpoints.BadRequestResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/endpoints.InternalServerResponse'
      security:
      - ApiKeyAuth: []
      summary: Accept invitation to group member
      tags:
      - Groups
  /api/v1/groups/creategroup:
    post:
      consumes:
      - application/json
      description: Create a new group with the provided group name to manage the expenses
        between the tenets
      parameters:
      - description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Group
        in: body
        name: group
        required: true
        schema:
          $ref: '#/definitions/groups.Group'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/endpoints.CreatedResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/endpoints.BadRequestResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/endpoints.InternalServerResponse'
      security:
      - ApiKeyAuth: []
      summary: Create a new group
      tags:
      - Groups
  /api/v1/groups/get_users:
    post:
      consumes:
      - application/json
      description: get all the users present in the group by the group name
      parameters:
      - description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Group name
        in: query
        name: group_name
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/endpoints.GetUsersResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/endpoints.BadRequestResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/endpoints.InternalServerResponse'
      summary: Get Users Present in the group
      tags:
      - Groups
  /api/v1/groups/invite:
    post:
      consumes:
      - application/json
      description: Update group name with the new group name
      parameters:
      - description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Invite User
        in: body
        name: invite
        required: true
        schema:
          $ref: '#/definitions/groups.Invitation'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/endpoints.InviteGroupMembersResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/endpoints.BadRequestResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/endpoints.InternalServerResponse'
      security:
      - ApiKeyAuth: []
      summary: Update the group name
      tags:
      - Groups
  /api/v1/groups/remove_group_member:
    put:
      consumes:
      - application/json
      description: Remove member from the group based on the email
      parameters:
      - description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Remove Group Member
        in: body
        name: removeMember
        required: true
        schema:
          $ref: '#/definitions/groups.AcceptInvitationStruct'
      produces:
      - application/json
      responses:
        "200":
          description: Group updated successfully
          schema:
            $ref: '#/definitions/groups.Group'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/endpoints.BadRequestResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/endpoints.InternalServerResponse'
      summary: Remove member from the group
      tags:
      - Groups
  /api/v1/groups/update_group_name:
    put:
      consumes:
      - application/json
      description: Update group name with the new group name
      parameters:
      - description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Update Group
        in: body
        name: updateGroup
        required: true
        schema:
          $ref: '#/definitions/groups.UpdateGroupStruct'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/endpoints.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/endpoints.BadRequestResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/endpoints.InternalServerResponse'
      security:
      - ApiKeyAuth: []
      summary: Update the group name
      tags:
      - Groups
  /api/v1/test:
    get:
      description: returns just message
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: Test endpoint to check all the connections are good
      tags:
      - Test
  /api/v1/users/signin:
    post:
      consumes:
      - application/json
      description: Sign in the user to the account with the provided email and password
      parameters:
      - description: User Signin
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/users.UserSigninStruct'
      produces:
      - application/json
      responses:
        "200":
          description: User Signin response
          schema:
            $ref: '#/definitions/users.UserSigninResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/endpoints.BadRequestResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/endpoints.InternalServerResponse'
      summary: Sign in the user to the account
      tags:
      - Users
  /api/v1/users/signup:
    post:
      consumes:
      - application/json
      description: Create a new user account with the provided email and password
      parameters:
      - description: User
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/users.User'
      produces:
      - application/json
      responses:
        "201":
          description: User created successfully
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/endpoints.BadRequestResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/endpoints.InternalServerResponse'
      summary: Create new user account
      tags:
      - Users
swagger: "2.0"
